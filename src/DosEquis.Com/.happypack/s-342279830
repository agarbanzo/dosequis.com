'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _scrollmagic = require('scrollmagic');

var _scrollmagic2 = _interopRequireDefault(_scrollmagic);

var _gsap = require('gsap');

var _gsap2 = _interopRequireDefault(_gsap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// include these files in files which call this script as a chunk
require('scss/components/mimgallery.scss');

var MimGallery = function () {
    function MimGallery() {
        var _this = this;

        _classCallCheck(this, MimGallery);

        var self = this;
        this.container = $('.most-interesting-man .most-interesting-gallery');
        this.item = $('.most-interesting-man .item');
        this.one = $('.most-interesting-man .item.one');
        this.two = $('.most-interesting-man .item.two');
        this.three = $('.most-interesting-man .item.three');
        this.four = $('.most-interesting-man .item.four');
        this.galleryArray = [this.four, this.one, this.two, this.three];
        this.copyDiv = $('.most-interesting-man .copy-container');
        this.textDiv = $('.most-interesting-man .copy-container .real-copy');
        this.prevSlide = -1;
        this.nextSlide = 0;
        this.endScale = 1.3;
        this.beginScale = 1.9;
        this.slideIntervalSec = 5.5;
        this.slideSpeedSec = 1.5;
        this.zoomSpeedSec = 11;
        this.zIndex = 100;
        this.interval;
        this.copyText = ["Chula Vista, California", "Muskegon, Michigan", "Waitomo Caves, New Zealand", "Nairobi, Kenya"];
        $(function () {
            _this.scroller = new _scrollmagic2.default.Controller();
            _this.createScrollMagicScene();
        });
    }

    _createClass(MimGallery, [{
        key: 'createInterval',
        value: function createInterval() {
            var self = this;
            self.interval = setInterval(function () {
                self.playSlide();
            }, self.slideIntervalSec * 1000);
            self.playSlide();
        }
    }, {
        key: 'createScrollMagicScene',
        value: function createScrollMagicScene() {
            var self = this;
            var mimHeight = $("#mim").height();
            var scene = new _scrollmagic2.default.Scene({
                triggerElement: '#mim',
                duration: mimHeight + mimHeight * 0.9,
                offset: -200
            }).addTo(this.scroller);
            scene.on("enter", function (event) {
                self.createInterval();
                // console.log("---- ENTER")
            });
            scene.on("leave", function (event) {
                clearInterval(self.interval);
                // console.log("---- LEAVE")
            });
        }
    }, {
        key: 'playSlide',
        value: function playSlide() {
            var self = this;
            if (self.prevSlide >= 0) self.playPrevious();
            self.prevSlide = self.nextSlide;
            self.playNext();
            self.nextSlide++;
            if (self.nextSlide >= this.galleryArray.length) {
                self.nextSlide = 0;
            }
        }
    }, {
        key: 'playNext',
        value: function playNext() {
            var self = this;
            var d = 0;
            var slide = this.galleryArray[this.nextSlide];
            slide.css('z-index', self.zIndex++);
            _gsap2.default.set(slide, { x: 0, scaleX: self.endScale, scaleY: self.endScale, alpha: 1 });
            _gsap2.default.from(slide, this.zoomSpeedSec, { scaleX: self.beginScale, scaleY: self.beginScale, delay: d, onUpdateParams: [slide], onUpdate: function onUpdate(p) {
                    var calc = (slide.height() - self.container.height()) * 0.5;
                    _gsap2.default.set(p, { y: calc });
                } });
            _gsap2.default.from(slide, this.slideSpeedSec, { x: -self.getContainerWidth() * 2, ease: Power4.easeInOut, delay: d });
            d += 1;
            var copy = self.copyDiv;
            self.textDiv.html(self.copyText[this.nextSlide]);
            _gsap2.default.set(copy, { alpha: 0, left: 17 });
            _gsap2.default.from(copy, 1, { left: 0, delay: d, ease: Power4.easeOut });
            _gsap2.default.to(copy, 0.5, { alpha: 1, delay: d });
        }
    }, {
        key: 'playPrevious',
        value: function playPrevious() {
            var self = this;
            var d = 0;
            var slide = this.galleryArray[this.prevSlide];
            var copy = self.copyDiv;
            _gsap2.default.to(slide, this.slideSpeedSec * 0.85, { x: self.getContainerWidth(), ease: Power4.easeIn, delay: d, onCompleteParams: [slide], onComplete: function onComplete(p) {
                    _gsap2.default.set(p, { alpha: 0 });
                } });
            _gsap2.default.to(copy, 0.4, { alpha: 0 });
        }
    }, {
        key: 'getContainerWidth',
        value: function getContainerWidth() {
            return $('.most-interesting-man .most-interesting-gallery').width();
        }
    }]);

    return MimGallery;
}();

exports.default = MimGallery;

var mimGallery = new MimGallery('.home');
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tracking = require('services/google-analytics/tracking');

var _tracking2 = _interopRequireDefault(_tracking);

var _getPaginatedItems = require('utils/getPaginatedItems');

var _loader = require('components/loader/loader');

var _loader2 = _interopRequireDefault(_loader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var template = require('../beerlocator/templates/list-item.html');

var MapList = function () {
	function MapList(selector) {
		var _this = this;

		_classCallCheck(this, MapList);

		this.listItems = [];
		this.currentPage = 1;
		this.index = 0;
		this.isListView = false;
		this.itemsPerPage = 20;
		window.dispatcher.on('addListItem', function (e) {
			return _this.add_item(e[0]);
		});
		window.dispatcher.on('onTypeChange', function (e) {
			return _this.reset();
		});
		window.dispatcher.on('onFilterChange', function (e) {
			return _this.reset();
		});
		window.dispatcher.on("onGPlacesChanged", function (e) {
			return _this.reset();
		});
		window.dispatcher.on("onLatLngChanged", function (e) {
			return _this.reset();
		});
		window.dispatcher.on("onLocationsDoneLoading", function (e) {
			return _this.renderListItems();
		});
		window.dispatcher.on('onNoLocationsFound', function (e) {
			return _this.showError();
		});
		window.dispatcher.on('onShowList', function (e) {
			return _this.setListView(e[0]);
		});
		this.loader = new _loader2.default('.fb-list');
		this.$loadmore = $(".loadmore");
		this.$loadmore.addClass('hide');
		this.$loadmore.on('click', function (e) {
			_this.currentPage++;
			_this.loadNextPage(_this.listItems);
		});
		$('.error-noresults').addClass('hide');
	}

	_createClass(MapList, [{
		key: 'setListView',
		value: function setListView(bool) {
			var b = bool ? this.isListView = true : this.isListView = false;
			if (this.isListView) var items = this.getItems(this.listItems);
			this.loadNextPage(this.listItems);
		}
	}, {
		key: 'renderListItems',
		value: function renderListItems() {
			if (!this.listItems.length) {
				this.showError();
			} else if (this.listItems.length && this.isListView) {
				var items = this.getItems(this.listItems);
				this.loadNextPage(items);
			}
		}
	}, {
		key: 'showError',
		value: function showError() {
			console.warn('You have no results');
			this.loader.hide();
		}
	}, {
		key: 'getItems',
		value: function getItems(items) {
			var arr = items;
			arr.sort(function (a, b) {
				var x = a.Distance,
				    y = b.Distance;
				return x < y ? -1 : x > y ? 1 : 0;
			});
			return arr;
		}
	}, {
		key: 'loadNextPage',
		value: function loadNextPage(items) {
			var _this2 = this;

			this.loader.hide();
			var pageItems = (0, _getPaginatedItems.getPaginatedItems)(items, this.currentPage, this.itemsPerPage);
			var items = pageItems.data;
			if (this.currentPage == 1) $(".resultsholder").empty();
			items.forEach(function (model, ind) {
				var $div = $(template(model)).appendTo($('.resultsholder'));
				$div.on('click', function (e) {
					return _this2.setListItemSelected(model.id);
				});
			});
			pageItems.total_pages > this.currentPage ? $('.loadmore').removeClass('hide') : $('.loadmore').addClass('hide');
			//console.log($('.resultsholder').children().length)
		}
	}, {
		key: 'add_item',
		value: function add_item(model) {
			this.listItems.push(model);
			this.index++;
			$('.count-topnumber').html(this.index);
		}
	}, {
		key: 'setListItemSelected',
		value: function setListItemSelected(id) {
			$('.bar[data-id=' + id + ']').addClass('selected');
			$('.bar[data-id!=' + id + ']').removeClass('selected');
			window.dispatcher.trigger('onSetMapItem', [id]);
		}
	}, {
		key: 'reset',
		value: function reset() {
			$('.loadmore,.error-noresults').addClass('hide');
			this.loader.show();
			this.listItems = [];
			this.index = 0;
			this.currentPage = 1;
			$(".resultsholder").empty();
			$('.count-topnumber').html('0');
		}
	}]);

	return MapList;
}();

exports.default = MapList;
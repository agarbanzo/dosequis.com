'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('utils/goToScroll');

var _tracking = require('services/google-analytics/tracking');

var _tracking2 = _interopRequireDefault(_tracking);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

require('jquery.transit');
require('scss/components/doublearrowbtn.scss');

var ScrollBtn = function () {
  function ScrollBtn(options) {
    _classCallCheck(this, ScrollBtn);

    this.el = options.el;
    this.max = 800 + 50;
    this.numItems = 0;
    this.offset = typeof options.offset !== 'undefined' ? options.offset : 1000;
    this.target = typeof options.target !== 'undefined' ? options.target : 'body';
    this.type = typeof options.type !== 'undefined' ? options.type : 'normal';
    this.direction = options.direction;
    this.animate = typeof options.animate !== 'undefined' ? options.type : false;
    this.gaData = options.ga || null;
    var _this = this;
    $(document).ready(function () {
      _this.render();
    });
  }

  _createClass(ScrollBtn, [{
    key: 'render',
    value: function render(selector) {
      var _this2 = this;

      var $div = $("<div>", { "class": "scrollbtn", "data-scrollTo": "mim" });
      var _this = this;

      if (this.type == 'fixed') {
        $div.addClass('is-fixed');
        this.addEventListeners($div);
      }

      // if(this.direction == "down"){
      // 	$div.addClass("down");
      // }
      if (this.direction == 'down') {
        $div.transition({ rotate: '180deg', opacity: 0 });
      }

      $div.click(function (e) {
        if (_this2.gaData) _tracking2.default.trackEvent(_this2.gaData);
        var thePositiontoScrollTo = $(_this.target).offset().top - $('nav').height();
        // Lets scroll
        $('html, body').animate({ scrollTop: thePositiontoScrollTo }, 'slow');
      });

      $(this.el).append($div);

      //if(this.animate){
      $div.transition({ opacity: 1, scale: 1 }).transition({ y: -20 }).transition({ y: 0 }).transition({ y: -20 }).transition({ y: 0 });
      // } 
    }
  }, {
    key: 'addEventListeners',
    value: function addEventListeners(div) {
      var $div = $(div);
      var offset = 1500;
      var max_w = 1425;
      var rightPos = $(window).width() / 2 + 1366 / 2 - 300;

      //hide or show the "menu" link
      checkWid();
      checkHei();
      $(window).scroll(function () {
        checkHei();
      });

      $(window).resize(function () {
        checkWid();
      });

      function checkWid() {}

      function checkHei() {
        if ($(window).scrollTop() > offset) {
          $div.addClass('is-visible');
        } else {
          $div.removeClass('is-visible');
        }
      }
    }
  }]);

  return ScrollBtn;
}();

exports.default = ScrollBtn;